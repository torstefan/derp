<view onunloadCancelJobs="True" autoCancelInterval="100" objectMode="SimpleForm" isDashboard="False">
  <!--  autoCancelInterval is set here to 100  -->
  <label>Indexing volume</label>
  <module name="AccountBar" layoutPanel="appHeader"/>
  <module name="AppBar" layoutPanel="navigationHeader"/>
  <module name="Message" layoutPanel="messaging">
    <param name="filter">*</param>
    <param name="clearOnJobDispatch">False</param>
    <param name="maxSize">1</param>
  </module>
  

  <!-- the entity listers are not as widely used as their search brethren.  -->
  <!-- but when they're useful they're SUPER useful.  Here we're making a pulldown -->
  <!-- that allows you to pick a particular distributed search peer. -->
  <!-- and then we add static values of 'any' and 'local' to that list as well. -->
  <module name="EntitySelectLister" layoutPanel="viewHeader" autoRun="True">
    <param name="entityPath">admin/distsearch-peer</param>
    <param name="label">Search Server</param>
    <param name="settingToCreate">splunkServer</param>
    <param name="count">250</param>
    <param name="selected">Any</param>
    <param name="entityFieldsToDisplay">
      <list>
        <param name="multiLabel">%(peerName)s (%(status)s)</param>
        <param name="value">peerName</param>
      </list>
    </param>
    <param name="staticFieldsToDisplay">
      <list>
        <param name="label">Any</param>
        <param name="value">*</param>
      </list>
      <list>
        <param name="label">Local server</param>
        <param name="value">local</param>
      </list>
      
    </param>
    <!-- Entity listers are just like search listers on the outside - they output  -->
    <!-- generic keys which you can then do things with.  Most commonly you'll use -->
    <!-- ConvertToIntention as we do here.  This will end up as a  -->
    <!-- splunk_server="<value>"  searchterm.  -->
    <module name="ConvertToIntention">
      <param name="intention">
        <param name="name">addterm</param>
        <param name="arg">
          <param name="splunk_server">$splunkServer$</param>
        </param>
        <!-- this flag tells it to put it in the first search clause no matter what  -->
        <!-- which we need to do, because splunk_server doesnt behave correctly in later -->
        <!-- search clauses. -->
        <param name="flags">
          <list>indexed</list>
        </param>
      </param>


      <!-- this static pulldown and the ConvertToIntention below it are a straightforward 'lister' pattern. -->
      <module name="StaticSelect">
        <param name="settingToCreate">groupSelection</param>
        <param name="label">Split by</param>
        <param name="selected">Index</param>
        <param name="staticFieldsToDisplay">
          <list>
            <param name="label">Select...</param>
            <param name="value"></param>
          </list>
          <list>
            <param name="label">Index</param>
            <param name="value">index</param>
          </list>
          <list>
            <param name="label">Source</param>
            <param name="value">source</param>
          </list>
          <list>
            <param name="label">Sourcetype</param>
            <param name="value">sourcetype</param>
          </list>
          <list>
            <param name="label">Host</param>
            <param name="value">host</param>
          </list>
        </param>
        <!-- at this point the 'group' value will be coming down from the StaticSelect module as $groupSelection$ -->
        <!-- we convert it to an intention that will turn into a group=per_sourcetype_thruput searchterm -->
        <module name="ConvertToIntention">
          <param name="intention">
            <param name="name">addterm</param>
            <param name="arg">
              <param name="group">per_$groupSelection$_thruput</param>
            </param>
          </param>

          <!-- here's the search that will get paired with the two addterm intentions we created.  -->
          <module name="HiddenSearch">
            <param name="search">index=_internal source=*metrics.log | eval MB=kb/1024 | chart sum(MB) by series | sort - sum(MB)</param>
            <param name="earliest">-30m</param>

            <!-- at this point we throw in a TimeRangePicker.  We want the user to be able to pick the  -->
            <!--  timerange to analyze. -->
            <module name="TimeRangePicker">
              <param name="searchWhenChanged">True</param>
              <param name="selected">Yesterday</param>


              <!-- NOTE: At this point in the tree we have a bunch of modules that need a -->
              <!-- running search, so it's right here that the splunk UI will collapse -->
              <!-- the intentions into the base search string and kick it off. --> 


              <!-- we hang a simple little dynamic header here to appear above the next table. -->
              <!-- note that it also uses the $groupSelection$ key.  This *may* become a wider convention, -->
              <!-- and it echoes the syntax of how stringreplace intentions are inserted into search strings. -->
              <!-- Hoowever currently only SimpleResultsHeader will do this.  We are considering widening it so -->
              <!-- that many or most modules could allow tokens like this to appear in user facing text.  -->
              <module name="SimpleResultsHeader" layoutPanel="resultsAreaLeft">
                <param name="entityName">results</param>
                <param name="headerFormat">Choose a recent $groupSelection$ to analyze</param>
              </module>
              
              <!--  We turn on preview so the user can see charts render progressively. -->
              <!--  cause that's how we roll -->
              <module name="EnablePreview" layoutPanel="resultsAreaLeft">
                <param name="display">false</param>
                <param name="enable">true</param>
              </module>
              
              <!-- The little progress bar. Especially important because depending on the -->
              <!-- time range selected this could take a long time.  -->
              <module name="JobProgressIndicator" layoutPanel="resultsAreaLeft">
              </module>

              <module name="Paginator" layoutPanel="resultsAreaLeft">
                <param name="entityName">results</param>
                <param name="maxPages">10</param>
                <param name="count">20</param>

                <!--  First table.  When the user clicks on this one, they will be selecting a particular 'series' -->
                <!--  specifically this will be a particular source, sourcetype or host. -->
                <module name="SimpleResultsTable">
                  <param name="displayRowNumbers">False</param>
                  <param name="drilldown">row</param>
                  <param name="entityName">results</param>
                  <param name="drilldownPrefix">drilldown</param>
                  
                  <!-- from here on in, the user has picked both the group and the series.  group is still groupSelection and series is now drilldown.value  -->
                  
                
                  
                  <!--  new base Search which we'll load all our final intentions onto -->
                  <module name="HiddenSearch" layoutPanel="resultsAreaRight">
                    <param name="search">index=_internal source=*metrics.log | eval MB=kb/1024 | timechart sum(MB)</param>

                    <!--  use that groupSelection key A SECOND TIME to build another intention -->
                    <!--  for our next search.  -->
                    <module name="ConvertToIntention">
                      <param name="intention">
                        <param name="name">addterm</param>
                        <param name="arg">
                          <param name="group">per_$groupSelection$_thruput</param>
                        </param>
                        <!-- this tells it to put it in the first search clause no matter what  -->
                        <param name="flags">
                          <list>indexed</list>
                        </param>
                      </param>

                      <!--  use the drilldown.value key (series) for the first time to build a series="syslog" -->
                      <!--  search term -->
                      <module name="ConvertToIntention">
                        <param name="intention">
                          <param name="name">addterm</param>
                          <param name="arg">
                            <param name="series">$drilldown.value$</param>
                          </param>
                          <!-- this tells it to put it in the first search clause no matter what  -->
                          <param name="flags">
                            <list>indexed</list>
                          </param>
                        </param>

                        <!--  another simple dynamic header so we can clue the user into what they're looking at. -->
                        <module name="SimpleResultsHeader">
                          <param name="entityName">results</param>
                          <param name="headerFormat">MB thruput over time for $groupSelection$ $drilldown.value$  $time$</param>
                        </module>
                        <module name="SimpleResultsHeader">
                          <param name="entityName">results</param>
                          <param name="headerFormat">(click a bar to see the events)</param>
                        </module>
                        
                        <!--  We turn on preview so the user can see charts render progressively. -->
                        <!--  cause that's how we roll -->
                        <module name="EnablePreview">
                          <param name="display">false</param>
                          <param name="enable">true</param>
                          
                          <!--  plain old combo of HiddenChartFormatter and JSChart -->
                          <module name="HiddenChartFormatter">
                            <param name="chart">column</param>
                            <param name="primaryAxisTitle.text">time</param>
                            <param name="secondaryAxisTitle.text">MB</param>
                            <param name="legend.placement">none</param>
                            <module name="JSChart">
                              <param name="width">100%</param>
                              <param name="height">250px</param>
                              <param name="drilldownPrefix">drilldown2</param>

                              <!-- Drilldown pattern with what we call 'custom wiring'. -->
                              <!-- When you click on the chart, -->
                              <!-- the user will see the actual events that were indexed at that time, -->
                              <!-- in an EventsViewer below the chart. -->

                              <!-- step 1 is to swap out the base Search so were not drilling into metrics log anymore.-->
                              <module name="HiddenSearch">
                                <!-- a little strange perhaps, but index=* will deliberately not include the hidden indexes that begin with underscores.  This search gets around that and matches them both. -->
                                <param name="search">index=* OR index=_* | timechart sum(MB)</param>

                                
                                <!-- step 2 is getting ConvertToDrilldownSearch to convert the _time values for us -->
                                <!-- that will be coming down from the JSChart, into the proper search API params. -->
                                <module name="ConvertToDrilldownSearch">
                                  <param name="drilldownPrefix">drilldown2</param>

                                  <!--  use that groupSelection key a THIRD time. along with the drilldown.value key -->
                                  <!-- A SECOND TIME (series) to build another intention, -->
                                  <!--  final result is a simple term like   sourcetype=syslog  -->
                                  <module name="ConvertToIntention">
                                    <param name="intention">
                                      <param name="name">addterm</param>
                                      <param name="arg">
                                        <param name="$groupSelection$">$drilldown.value$</param>
                                      </param>
                                    </param>

                                    <!-- we hang a simple little dynamic header here to appear above the EventsViewer. -->
                                    <module name="SimpleResultsHeader">
                                      <param name="entityName">events</param>
                                      <param name="headerFormat">$count$ events for $groupSelection$=$drilldown.value$ $time$</param>
                                    </module>

                                    <module name="Paginator">
                                      <param name="entityName">events</param>
                                      <param name="maxPages">10</param>
                                      <param name="count">20</param>
                                      <module name="EventsViewer">
                                        <param name="segmentation">full</param>
                                        <param name="reportFieldLink">report_builder_format_report</param>
                                        <param name="enableBehavior">False</param>
                                      </module>
                                      <!-- and here's the standard way of including a second paginator. -->
                                      <module name="Paginator">
                                        <param name="entityName">events</param>
                                        <param name="maxPages">10</param>
                                      </module>
                                    </module>
                                  </module>
                                </module>
                              </module>
                            </module>
                          </module>
                        </module>
                      </module>
                    </module>
                  </module>
                </module>
              </module>
            </module>

          </module>
        </module>
      </module>
    </module>
  </module>

</view>
